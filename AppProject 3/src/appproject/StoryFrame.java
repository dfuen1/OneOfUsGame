/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appproject;

import BookClasses.Picture;
import BookClasses.World;
import java.awt.Dimension;
import java.util.Random;
import javax.swing.ListModel;
import javax.swing.Popup;

/**
 * Daniel Fuentes
 * @author dfuen01
 */
public class StoryFrame extends javax.swing.JFrame {
private Player mainPlay;
private String choiceEntered = "-1";
private int uniqueCode;
private int randomUniqueCode;
private Monster mainMonster;
    /**
     * Creates new form StoryFrame
     */
    public StoryFrame() {
        initComponents();
    }
    
    /**
     * Creates new form of StoryFrame with a player and monster
     * @param mainPlay The current player of the game
     * @param mon The monster of the game
     */
    public StoryFrame(Player mainPlay, Monster mon){
     initComponents();   
     this.mainPlay = mainPlay;
     this.mainMonster = mon;
     //Updates health of player in HUD
     changingHealth.setText(Integer.toString(mainPlay.getHealth()));
    }
    
    //Changes the prompt of the text area outside of the StoryFrame class
    public void changePrompt(String newPrompt){
        promptField.setText(newPrompt);
    }
    
    
    /**
     * Accesses the array that holds the choices within the JList
     * @return choiceList
     */
    public javax.swing.JList getChoiceList() { 
        return this.choiceList;
    }
    
    /**
     * Starts the set of text from the top; used for instances of StoryFrame outside of class
     */
    public void setCaretPositionToZero(){
        promptField.setCaretPosition(0);
    }
    
    /**
     * Sets the line wrap feature to true; used for instances of StoryFrame outside of class
     */
    public void setLineWrap(){
        promptField.setLineWrap(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new java.awt.ScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backgroundPanel = new javax.swing.JPanel();
        playerHUD = new javax.swing.JPanel();
        healthLabel = new javax.swing.JLabel();
        changingHealth = new javax.swing.JLabel();
        mapButton = new javax.swing.JButton();
        inventoryButton = new javax.swing.JButton();
        locationLabel = new javax.swing.JLabel();
        currentLocation = new javax.swing.JLabel();
        choicesAvailable = new javax.swing.JScrollPane();
        choiceList = new javax.swing.JList<>();
        proceedButton = new javax.swing.JButton();
        promptScrollPane = new javax.swing.JScrollPane();
        promptField = new javax.swing.JTextArea();
        randomChooserButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backgroundPanel.setBackground(new java.awt.Color(153, 153, 153));

        playerHUD.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        healthLabel.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        healthLabel.setForeground(new java.awt.Color(102, 102, 102));
        healthLabel.setText("HEALTH");

        changingHealth.setFont(new java.awt.Font("Copperplate", 0, 14)); // NOI18N
        changingHealth.setForeground(new java.awt.Color(0, 204, 102));
        changingHealth.setText("jLabel1");

        mapButton.setText("Map");
        mapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapButtonActionPerformed(evt);
            }
        });

        inventoryButton.setText("Inventory");
        inventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryButtonActionPerformed(evt);
            }
        });

        locationLabel.setFont(new java.awt.Font("Copperplate", 0, 12)); // NOI18N
        locationLabel.setForeground(new java.awt.Color(102, 102, 102));
        locationLabel.setText("LOCATION");

        currentLocation.setFont(new java.awt.Font("Copperplate", 0, 12)); // NOI18N
        currentLocation.setText("N/A");

        javax.swing.GroupLayout playerHUDLayout = new javax.swing.GroupLayout(playerHUD);
        playerHUD.setLayout(playerHUDLayout);
        playerHUDLayout.setHorizontalGroup(
            playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerHUDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerHUDLayout.createSequentialGroup()
                        .addComponent(healthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changingHealth))
                    .addGroup(playerHUDLayout.createSequentialGroup()
                        .addComponent(locationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentLocation)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(inventoryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapButton)
                .addContainerGap())
        );
        playerHUDLayout.setVerticalGroup(
            playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerHUDLayout.createSequentialGroup()
                .addGroup(playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerHUDLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mapButton)
                            .addComponent(inventoryButton)))
                    .addGroup(playerHUDLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(healthLabel)
                            .addComponent(changingHealth))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playerHUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(locationLabel)
                            .addComponent(currentLocation))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        choiceList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        choiceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                choiceListValueChanged(evt);
            }
        });
        choicesAvailable.setViewportView(choiceList);

        proceedButton.setText(">");
        proceedButton.setEnabled(false);
        proceedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedButtonActionPerformed(evt);
            }
        });

        promptField.setEditable(false);
        promptField.setColumns(20);
        promptField.setRows(5);
        promptField.setWrapStyleWord(true);
        promptScrollPane.setViewportView(promptField);

        randomChooserButton.setText("Leave it to the stars");
        randomChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomChooserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playerHUD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(promptScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(randomChooserButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(proceedButton))
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(choicesAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerHUD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(promptScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(choicesAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomChooserButton)
                    .addComponent(proceedButton))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * METHOD THAT ASSISTS WITH FUNCTIONALITY 1 AND HELPS FUNCTIONALITY 3: This method is what actions updates the JFrame according to choice made by the player, also changes Player's health depending on actions made by player
     * @param evt 
     */
    private void proceedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedButtonActionPerformed
        
        //Takes the String of the was previously chosen and splits it so that
        //it only reads the number before the colon. Using that number, the StoryFrame
        //updates the set scene and the choices by calling the gameplot method in the Game class
        String[] op = this.choiceEntered.split(":"); 
        uniqueCode = Integer.parseInt(op[0]);
        
           Game playerGame = new Game(mainPlay, mainMonster);
           //Keeps track the decisions made by the player
           mainPlay.addToPlayerPath(uniqueCode);
           //Depending on the choice made by the player, a different point in decision tree will play out
           playerGame.gamePlot(uniqueCode);
           promptField.setText(playerGame.getScene());
           promptField.setLineWrap(true);
           //This makes sure the text area starts from the top
           promptField.setCaretPosition(0);
           choiceList.setListData(playerGame.getChoicesForScene());
           
           //The health will change depending on what happens to the player based on their decision
           changingHealth.setText(Integer.toString(mainPlay.getHealth()));
           currentLocation.setText(playerGame.getLocation());
           proceedButton.setEnabled(false);
        

        //This was for myself to know if the value was reseting each time the game changes scenes
        System.out.println("Value chosen was index: " + this.choiceEntered); 
        //Clears the selection that was made in the
        choiceList.clearSelection();
       

    }//GEN-LAST:event_proceedButtonActionPerformed
/**
 * Assures that a choice has been made from the choice list and assigns choice to a variable
 * @param evt 
 */
    private void choiceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_choiceListValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting()) {        //debounce done
            
            choiceEntered = this.choiceList.getSelectedValue();
            proceedButton.setEnabled(true);
        }
     
    }//GEN-LAST:event_choiceListValueChanged

    /**
     * MAIN FUNCTIONALITY 2:This method displays a picture of the map when the "Map" button is pressed
     * @param evt 
     */
    private void mapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapButtonActionPerformed
        // TODO add your handling code here:
       Map shipMap = new Map(600, 597);
       //THIS PATH NEEDS TO BE FIXED INTO A RELATIVE PATH
       shipMap.setMapBackground("/Users/dfuen01/NetBeansProjects/AppProject/src/appproject/FinalMapDrawingSmall.jpg");
        
       
    }//GEN-LAST:event_mapButtonActionPerformed

    /**
     * MAIN FUNCTIONALITY 4: This button will randomly make a decision for the player based on the available choices at a given time
     * @param evt 
     */
    private void randomChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomChooserButtonActionPerformed
        // TODO add your handling code here:

        //Find a way to gain access to array in JList component
       javax.swing.JList choiceList = this.getChoiceList(); 
       ListModel model = choiceList.getModel();
       //Find how many elements are in the array within the JList
       int choicesArrSize = model.getSize(); 
       
       Random rand = new Random();
       int randChoice = rand.nextInt(choicesArrSize);   //random number from 0 to array length-1
       //so the number will not be out of bounds 
       String choice = model.getElementAt(randChoice).toString(); 
       String[] op = choice.split(":"); 
       String uniqueVal = op[0]; 
       
       
       choiceEntered = uniqueVal;
       proceedButton.setEnabled(true);
       
       
    }//GEN-LAST:event_randomChooserButtonActionPerformed
/**
 * Creates an Inventory form to display the current inventory of the player; part of FUNCTIONALITY 5
 * @param evt 
 */
    private void inventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryButtonActionPerformed
        // TODO add your handling code here:
        Inventory playInvent = new Inventory(mainPlay);
        //Takes items in player's inventory and puts them in a String array to display in the Inventory JFrame
        Item[] currentInventory = mainPlay.getPlayerInventory(); 
        //Displayable array
        String[] itemNames = new String[currentInventory.length];
        for(int i = 0; i<currentInventory.length; i++) {
            //Only put the item names of items that exist in the displayable array 
            if(currentInventory[i] != null) { 
                itemNames[i] = currentInventory[i].getItemName();
            }
        }
        playInvent.getItemList().setListData(itemNames);
        playInvent.setVisible(true);
    }//GEN-LAST:event_inventoryButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StoryFrame().setVisible(true);
            }
        });
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel changingHealth;
    private javax.swing.JList<String> choiceList;
    private javax.swing.JScrollPane choicesAvailable;
    private javax.swing.JLabel currentLocation;
    private javax.swing.JLabel healthLabel;
    private javax.swing.JButton inventoryButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JButton mapButton;
    private javax.swing.JPanel playerHUD;
    private javax.swing.JButton proceedButton;
    private javax.swing.JTextArea promptField;
    private javax.swing.JScrollPane promptScrollPane;
    private javax.swing.JButton randomChooserButton;
    private java.awt.ScrollPane scrollPane1;
    // End of variables declaration//GEN-END:variables
}
